#!/usr/bin/env python

from __future__ import print_function

import argparse

from collections import defaultdict

def parse_log(log, key):
    times = []
    with open(log) as f:
        for l in f:
            if not l.startswith('TimeModule>'):
                continue

            _, event, _, label, module, time = l.strip().split(' ')
            times.append((event, label, module, float(time) * 1000))

    # build dict, sorting on (event | label [default] | module)
    times_per_key = defaultdict(list)
    for t in times:
        times_per_key[t[key]].append(t[3])

    return {k: sum(v)/len(v) for k, v in times_per_key.items()}


def parse_times(params):
    key = params['key']

   if len(params['logs']) == 2 and params['diff']:
       group = [parse_log(log, key) for log in params['logs']]
       total = [sum(g.itervalues()) for g in group]
       diff = {k: group[1][k] - group[0][k] for k in group[0] if k in group[1]}

       for k, v in sorted(diff.items(), key=lambda x: abs(x[1])):
           print('{:>64}: {:9.3f} > {:9.3f} | {:9.3f} [{:8.2%}]'.format(
               k, group[0][k], group[1][k], v, v/group[0][k]))
           group[0].pop(k)
           group[1].pop(k)

       print('  removals:')
       for k, v in sorted(group[0].items(), key=lambda x: x[1]):
           print('{:>64}: {:9.3f}'.format(k, v))
       print('  additions:')
       for k, v in sorted(group[1].items(), key=lambda x: x[1]):
           print('{:>64}:             {:9.3f}'.format(k, v))
       print('   --')
       print('{:>64}: {:9.3f} > {:9.3f} | {:9.3f} [{:8.2%}]'.format(
           'total', total[0], total[1], total[1]-total[0], total[1]/total[0]-1))

       changes = sum(diff.itervalues())
       removals = -sum(group[0].itervalues())
       additions = sum(group[1].itervalues())

       print('')
       print('  summary:')
       print('   changes: {:.3f}, removals: {:.3f}, additions: {:.3f}'.format(
           changes, removals, additions))
       print('   total: {:.3f}'.format(changes + removals + additions))

   elif len(params['logs']) == 1:
       times_per_key = parse_log(params['logs'][0], key)
       for k, v in sorted(times_per_key.items(), key=lambda x: x[1]):
           print('{:>64}: {:9.3f}'.format(k, v))

    else:
        print('multiple files not supported except for --diff (2)')


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('logs', nargs='+')
    parser.add_argument('-d', '--diff', action='store_true')
    parser.add_argument('-k', '--key', nargs='?', default=1, const=1, type=int)

    args = parser.parse_args()

    parse_times(vars(args))
