#!/bin/bash

helpmessage() {
   echo -e "usage: till\n"
   echo -e "   -a, --all      use all files found"
   echo -e "   -c, --config   cmsrun config"
   echo -e "   -d, --data     overwrite streamer path"
   echo -e "   -e, --echo     print run numbers"
   echo -e "   -f, --forward  forward arguments to grow"
   echo -e "   -g, --grow     grow trees directly"
   echo -e "   -h, --help     show (this) help message"
   echo -e "   -k, --kill     force removal of existing lists"
   echo -e "   -l, --logs     logs directory"
   echo -e "   -n             number of files"
   echo -e "   -o, --output   output directory"
   echo -e "   -p, --path     set data path"
   echo -e "   -s, --stream   data streamer"
   echo -e "   -u, --update   update [runs] with runs"
   echo -e "   -x, --exclude  runs to omit"
   echo -e "   -y, --yell     print full data paths"
   echo -e "   -z, --suffix   suffix after run directories"
}

ARGS=()

while [ $# -gt 0 ]; do
   case "$1" in
      -a|--all)      all=1; shift ;;
      -c|--config)   config="$2"; shift 2 ;;
      --config=*)    config="${1#*=}"; shift ;;
      -d|--data)     data="$2"; shift 2 ;;
      --data=*)      data="${1#*=}"; shift ;;
      -e|--echo)     shout=1; shift ;;
      -f|--forward)  fwargs="$2"; shift 2 ;;
      --forward=*)   fwargs="${1#*=}"; shift ;;
      -g|--grow)     grow=1; shift ;;
      -h|--help)     helpmessage; exit 0 ;;
      -k|--kill)     kill=1; shift ;;
      -l|--logs)     log="$2"; shift 2 ;;
      --logs=*)      log="${1#*=}"; shift ;;
      -n)            n="$2"; shift 2 ;;
      -n=*)          n="${1#*=}"; shift ;;
      -o|--output)   out="$2"; shift 2 ;;
      --output=*)    out="${1#*=}"; shift ;;
      -p|--path)     path="$2"; shift 2 ;;
      --path=*)      path="${1#*=}"; shift ;;
      -s|--stream)   stream="$2"; shift 2 ;;
      --stream=*)    stream="${1#*=}"; shift ;;
      -u|--update)   update=1; shift ;;
      -x|--exclude)  exclude="$2"; shift 2 ;;
      --exclude=*)   exclude="${1#*=}"; shift ;;
      -y|--yell)     yell=1; shift ;;
      -z|--suffix)   suffix="$2"; shift 2;;
      --suffix=*)    suffix="${1#*=}"; shift ;;
      -*)            echo -e "invalid option: $1\n"; exit 1 ;;
      *)             ARGS+=("$1"); shift ;;
   esac
done

set -- "${ARGS[@]}"

[ $# -ne 0 ] && { echo -e "check arguments\n"; exit 1; }

[ $grow ] && [ ! $config ] && {
   echo -e "  \033[31mno tree (config) to grow\033[0m\n"; exit 1; }
[ ! $grow ] && [ $update ] && {
   echo -e "  \033[31mcannot update without growing\033[0m\n"; exit 1; }

[ ! -f $exclude ] && {
   echo -e "  \033[31mfile not found: $exclude\033[0m\n"; exit 1; }
[ ! $exclude ] && [ $update ] && {
   echo -e "  \033[31mno file to update\033[0m\n"; exit 1; }

[ $path ] && [ $shout ] && {
   echo -e "  \033[31mnothing to echo: path is set\033[0m\n"; exit 1; }

[ $path ] && ( [ $data ] || [ $stream ] ) &&
   echo -e "  \033[31m--path overwrites --data and --stream\033[0m\n"
[ $data ] && [ $stream ] &&
   echo -e "  \033[31m--data overwrites --stream\033[0m\n"
[ $all ] && [ $n ] &&
   echo -e "  \033[31m--all overwrites -n\033[0m\n"

[ $out ] &&
   outdir=$(readlink -f $out) ||
   outdir=/eos/cms/store/group/phys_heavyions/$USER/farm/
[ $log ] &&
   logdir=$(readlink -f $log) ||
   logdir=/afs/cern.ch/work/${USER:0:1}/$USER/private/logs/farm/
[ $stream ] || stream=HIPhysicsMinimumBias0
[ $data ] || data=/eos/cms/store/t0streamer/Data/$stream/000
[ $n ] || n=4

paths=()
logs=()
outs=()
runs=()

if [ $path ]; then
   paths=$path
   logs=$logdir
   outs=$outdir
else
   for high in $(ls $data); do
      for low in $(ls $data/$high); do
         run=$high$low

         [ $exclude ] && grep -Fqx "$run" $exclude ||
            runs+=("$run")
      done
   done

   [ ${#runs[@]} -eq 0 ] && {
      echo -e "  \033[31mno new runs\033[0m\n"; exit 0; }

   [ $shout ] && { printf '%s\n' "${runs[@]}"; exit 0; }

   for run in ${runs[@]}; do
      paths+=($data/${run:0:3}/${run:3}/$suffix)
      logs+=($logdir/$run)
      outs+=($outdir/$run)
   done
fi

[ $yell ] && { printf '%s\n' "${paths[@]}"; exit 0; }

for p in ${!paths[@]}; do
   mkdir -p ${logs[$p]}/
   list=${logs[$p]}/till_${paths[$p]//\//_}.list

   [ -f $list ] && {
      if [ $kill ]; then
         rm $list
      else
         echo -e "  \033[31mlist exists:";
         echo -e "   $list\033[0m\n"; exit 1;
      fi }

   files=(${paths[$p]}/*)
   nfiles=${#files[@]}; nf=$n
   [ $all ] || [ $nfiles -lt $nf ] && nf=$nfiles
   indices=($(shuf -i 0-$((nfiles-1)) -n $nf))
   for i in "${indices[@]}"; do
      echo "file:${files[$i]}" >> $list
   done

   if [ ! $grow ]; then
      echo "grow $list $config $fwargs -l ${logs[$p]} -o ${outs[$p]}"
   else
      echo -e "  prepared: \033[34m$list\033[0m"
      k5reauth -p $USER -k $HOME/.keytab -- grow \
         $fwargs -l ${logs[$p]} -o ${outs[$p]} $list $config
      [ $update ] && [ $exclude ] && stdbuf -oL echo ${runs[$p]} >> $exclude
   fi
done
